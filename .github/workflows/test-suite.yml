name: Comprehensive Test Suite

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly tests
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: 20
  RUST_VERSION: stable

jobs:
  # Unit Tests
  unit-tests-frontend:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests with coverage
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: frontend-unit
          name: frontend-unit-coverage

  unit-tests-backend:
    name: Backend Unit Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
      
      - name: Run Rust tests
        run: |
          cd src-tauri
          cargo test --all-features --verbose
      
      - name: Generate test report
        if: always()
        run: |
          cd src-tauri
          cargo test --all-features --no-run --message-format=json | jq -r 'select(.profile.test == true) | .target.name' > test-report.txt

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "curl -f http://localhost:11434/api/tags || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000
        env:
          IS_PERSISTENT: TRUE
          ANONYMIZED_TELEMETRY: FALSE
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          OLLAMA_HOST: http://localhost:11434
          CHROMA_HOST: http://localhost:8000
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results/integration/

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Build application
        run: npm run build
      
      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30 # Wait for services to be ready
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: |
            test-results/playwright-report/
            test-results/videos/
            test-results/screenshots/
      
      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run performance tests
        run: npm run test:performance
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: test-results/performance/
      
      - name: Comment PR with performance metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('test-results/performance/summary.json', 'utf8'));
            
            const comment = `## Performance Test Results
            
            | Metric | Value | Baseline | Change |
            |--------|-------|----------|--------|
            | Bundle Size | ${results.bundleSize} | ${results.baselineBundleSize} | ${results.bundleSizeChange} |
            | Build Time | ${results.buildTime}s | ${results.baselineBuildTime}s | ${results.buildTimeChange} |
            | Memory Usage | ${results.memoryUsage}MB | ${results.baselineMemoryUsage}MB | ${results.memoryChange} |
            | Startup Time | ${results.startupTime}ms | ${results.baselineStartupTime}ms | ${results.startupChange} |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit
        run: npm audit --production --audit-level=high
      
      - name: Run Rust security audit
        run: |
          cargo install cargo-audit
          cd src-tauri && cargo audit

  # Docker Tests
  docker-tests:
    name: Docker Build Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build test runner image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: false
          tags: gerdsenai-socrates:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker Compose setup
        run: |
          docker-compose -f docker-compose.test.yml config
          docker-compose -f docker-compose.test.yml up -d
          sleep 30
          docker-compose -f docker-compose.test.yml ps
          docker-compose -f docker-compose.test.yml down

  # Test Report Summary
  test-summary:
    name: Test Summary
    needs: [unit-tests-frontend, unit-tests-backend, integration-tests, e2e-tests, performance-tests, security-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate test summary
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Unit Tests | ${{ needs.unit-tests-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Unit Tests | ${{ needs.unit-tests-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
      
      - name: Check overall status
        if: |
          needs.unit-tests-frontend.result != 'success' ||
          needs.unit-tests-backend.result != 'success' ||
          needs.integration-tests.result != 'success' ||
          needs.e2e-tests.result != 'success' ||
          needs.security-tests.result != 'success'
        run: exit 1