name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: 20
  RUST_VERSION: stable

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.get_version.outputs.VERSION }}',
              name: 'GerdsenAI Socrates ${{ steps.get_version.outputs.VERSION }}',
              body: 'Release ${{ steps.get_version.outputs.VERSION }}',
              draft: false,
              prerelease: false
            });
            return data.id;
            
  build-release:
    name: Build Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: create-release
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bundle: appimage
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bundle: msi
            
          - os: macos-latest
            target: universal-apple-darwin
            bundle: dmg
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}
          
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run tauri build -- --target ${{ matrix.target }}
        
      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const bundlePath = 'src-tauri/target/${{ matrix.target }}/release/bundle/msi';
            const files = fs.readdirSync(bundlePath);
            const msiFile = files.find(file => file.endsWith('.msi'));
            
            if (msiFile) {
              const filePath = path.join(bundlePath, msiFile);
              const stats = fs.statSync(filePath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ needs.create-release.outputs.release_id }},
                name: `gerdsenai-socrates-${{ steps.get_version.outputs.VERSION }}-x64.msi`,
                data: fs.readFileSync(filePath),
              });
            }
            
      - name: Upload Release Asset (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const bundlePath = 'src-tauri/target/${{ matrix.target }}/release/bundle/dmg';
            const files = fs.readdirSync(bundlePath);
            const dmgFile = files.find(file => file.endsWith('.dmg'));
            
            if (dmgFile) {
              const filePath = path.join(bundlePath, dmgFile);
              const stats = fs.statSync(filePath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ needs.create-release.outputs.release_id }},
                name: `gerdsenai-socrates-${{ steps.get_version.outputs.VERSION }}-universal.dmg`,
                data: fs.readFileSync(filePath),
              });
            }
            
      - name: Upload Release Asset (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const bundlePath = 'src-tauri/target/${{ matrix.target }}/release/bundle/appimage';
            const files = fs.readdirSync(bundlePath);
            const appImageFile = files.find(file => file.endsWith('.AppImage'));
            
            if (appImageFile) {
              const filePath = path.join(bundlePath, appImageFile);
              const stats = fs.statSync(filePath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ needs.create-release.outputs.release_id }},
                name: `gerdsenai-socrates-${{ steps.get_version.outputs.VERSION }}-x86_64.AppImage`,
                data: fs.readFileSync(filePath),
              });
            }
            
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            });